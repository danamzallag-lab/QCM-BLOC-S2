import { useState } from 'react'
import { Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'

const questions = [
  {
    id: 1,
    type: 'qcu',
    question: "Quel est le crit√®re d'√©ligibilit√© prioritaire pour engager l'accompagnement asthme en officine ?",
    options: [
      "Prescription d'un SABA seul (au besoin)",
      "Patient majeur avec au moins une hospitalisation pour crise",
      "Prescription de cortico√Ødes inhal√©s pr√©vue sur 6 mois ou plus",
      "√Çge sup√©rieur √† 12 ans"
    ],
    correctAnswer: 2,
    feedback: "L'√©ligibilit√© cible un patient sous traitement de fond par cortico√Ødes inhal√©s (CSI) avec une dur√©e pr√©vue ‚â• 6 mois. Le rep√©rage peut se faire √† la primo-d√©livrance de CSI, aux renouvellements, ou apr√®s une d√©compensation.",
    niveau: '√âligibilit√©'
  },
  {
    id: 2,
    type: 'qcu',
    question: "Comment se structure le parcours d'accompagnement la 1re ann√©e ?",
    options: [
      "Deux entretiens: √©valuation et bilan final",
      "Trois entretiens: √©valuation, module th√©matique, 2e module + bilan",
      "Quatre entretiens: deux √©valuations, un module, un bilan",
      "Un seul entretien annuel de synth√®se"
    ],
    correctAnswer: 1,
    feedback: "Ann√©e 1: 3 entretiens ‚Äî 1) √âvaluation, 2) Module th√©matique adapt√©, 3) Second module + bilan et plan d'action.",
    niveau: 'Parcours'
  },
  {
    id: 3,
    type: 'qcu',
    question: "Pour un a√©rosol doseur (MDI), quel geste est correct ?",
    options: [
      "D√©clencher la bouff√©e apr√®s une inspiration profonde",
      "D√©clencher au d√©but d'une inspiration lente et profonde",
      "Inspirer tr√®s vite comme pour un DPI",
      "Souffler dans l'embout juste avant de d√©clencher"
    ],
    correctAnswer: 1,
    feedback: "MDI: expirer doucement, placer l'embout, puis d√©clencher au d√©but d'une inspiration lente et profonde; garder la respiration quelques secondes ensuite.",
    niveau: 'Technique d\'inhalation'
  },
  {
    id: 4,
    type: 'qcu',
    question: "Pour un dispositif √† poudre (DPI), quelle instruction est la plus juste ?",
    options: [
      "Inspirer lentement et d√©clencher en fin d'inspiration",
      "Ne pas expirer avant l'inspiration pour garder l'humidit√©",
      "Charger la dose, expirer loin de l'embout, inspirer fort et rapidement",
      "Rincer la bouche avant l'inspiration pour limiter la toux"
    ],
    correctAnswer: 2,
    feedback: "DPI: charger la dose selon le dispositif, expirer √† distance de l'embout, puis inspirer FORT et rapidement; retenir son souffle quelques secondes.",
    niveau: 'Technique d\'inhalation'
  },
  {
    id: 5,
    type: 'qcu',
    question: "Pourquoi recommander un rin√ßage de bouche apr√®s chaque prise de CSI ?",
    options: [
      "Pour am√©liorer l'absorption syst√©mique du CSI",
      "Pour diminuer la dysphonie et la candidose oropharyng√©e",
      "Pour acc√©l√©rer l'effet bronchodilatateur",
      "Pour r√©duire l'effet anticholinergique"
    ],
    correctAnswer: 1,
    feedback: "Le rin√ßage de bouche r√©duit les effets ind√©sirables locaux des cortico√Ødes inhal√©s: dysphonie et candidose.",
    niveau: 'Effets ind√©sirables'
  },
  {
    id: 6,
    type: 'qcu',
    question: "Quel conseil est le plus pertinent pour renforcer l'observance du traitement de fond ?",
    options: [
      "Diminuer progressivement le CSI d√®s am√©lioration",
      "Utiliser seulement le CSI en cas de sympt√¥mes",
      "Associer la prise √† une routine quotidienne et programmer des rappels",
      "Passer d'un CSI quotidien √† un SABA r√©gulier"
    ],
    correctAnswer: 2,
    feedback: "Ancrer une routine (ex: apr√®s le brossage) et utiliser des rappels/alertes sont des leviers d'observance; le CSI se prend tous les jours, m√™me sans sympt√¥mes.",
    niveau: 'Observance'
  },
  {
    id: 7,
    type: 'qcu',
    question: "Quel conseil environnemental est appropri√© chez un patient sensibilis√© aux acariens ?",
    options: [
      "A√©rer tr√®s peu pour conserver une atmosph√®re stable",
      "Utiliser des housses anti-acariens et a√©rer r√©guli√®rement",
      "√âviter tout contact ext√©rieur pendant la saison pollinique",
      "Dormir avec l'animal domestique pour s'habituer"
    ],
    correctAnswer: 1,
    feedback: "Mesures utiles: housses anti-acariens, a√©ration r√©guli√®re, r√©duire les nids √† poussi√®re; √©viter la fum√©e de tabac.",
    niveau: 'D√©clencheurs'
  },
  {
    id: 8,
    type: 'qcu',
    question: "En cas de signes de d√©compensation s√©v√®re (dyspn√©e marqu√©e, difficult√© √† parler), quelle conduite recommander ?",
    options: [
      "Prendre deux bouff√©es de CSI et attendre",
      "Boire de l'eau et se reposer",
      "Administrer 2 bouff√©es de salbutamol si disponible et appeler le 15 en cas de d√©tresse",
      "Doubler le traitement de fond pendant 48 heures"
    ],
    correctAnswer: 2,
    feedback: "Devant des signes s√©v√®res: recourir au bronchodilatateur de secours si disponible et contacter les secours (15) en cas de d√©tresse respiratoire.",
    niveau: 'Urgence'
  },
  {
    id: 9,
    type: 'qcu',
    question: "Quelle pratique de coordination/tra√ßabilit√© est attendue apr√®s l'entretien ?",
    options: [
      "Aucune trace si le patient va mieux",
      "Tracer dans DP/DMP et envoyer un message MSS au m√©decin traitant si besoin",
      "Envoyer syst√©matiquement l'ordonnance originale √† la CPAM",
      "Appeler la pharmacie de garde pour information"
    ],
    correctAnswer: 1,
    feedback: "Tracer dans le DP/DMP, conserver les fiches d'entretien et informer le m√©decin via MSS si n√©cessaire font partie des bonnes pratiques.",
    niveau: 'Coordination'
  },
  {
    id: 10,
    type: 'qcu',
    question: "Quelle affirmation est correcte concernant la facturation ?",
    options: [
      "Ann√©e 1: trois entretiens ASI √† 15 ‚Ç¨, 15 ‚Ç¨ et 20 ‚Ç¨",
      "TAC correspond √† un forfait de 10 ‚Ç¨ au d√©marrage",
      "Ann√©es suivantes: 3 entretiens annuels ASS",
      "Les entretiens sont toujours cumulables avec toute autre prestation le m√™me jour"
    ],
    correctAnswer: 0,
    feedback: "Ann√©e 1: 3 entretiens (ASI 15 ‚Ç¨ + 15 ‚Ç¨ + 20 ‚Ç¨). Les ann√©es suivantes: ASS 10 ‚Ç¨ + 20 ‚Ç¨. TAC est un traceur d'adh√©sion (0,01 ‚Ç¨). L'acte n'est pas cumulable sur le m√™me flux le jour m√™me.",
    niveau: 'Facturation'
  }
]

export default function QCMAsthme() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState({})
  const [showFeedback, setShowFeedback] = useState(false)
  const [score, setScore] = useState(0)
  const [completed, setCompleted] = useState(false)

  const question = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  const handleAnswer = (answer) => {
    setAnswers({ ...answers, [currentQuestion]: answer })
    setShowFeedback(true)

    // Check if correct
    let isCorrect = false
    if (question.type === 'vrai-faux') {
      isCorrect = answer === question.correctAnswer
    } else if (question.type === 'qcu') {
      isCorrect = answer === question.correctAnswer
    } else if (question.type === 'qcm') {
      isCorrect = JSON.stringify(answer.sort()) === JSON.stringify(question.correctAnswers.sort())
    }

    if (isCorrect && !answers[currentQuestion]) {
      setScore(score + 1)
    }
  }

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
      setShowFeedback(false)
    } else {
      setCompleted(true)
    }
  }

  const previousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1)
      setShowFeedback(false)
    }
  }

  if (completed) {
    const finalScore = (score / questions.length) * 100
    return (
      <div className="min-h-screen py-12 px-4 flex items-center justify-center">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="max-w-2xl w-full bg-white/10 backdrop-blur-lg rounded-3xl p-12 text-center border border-white/20"
        >
          <div className="text-6xl mb-6">üéâ</div>
          <h2 className="text-4xl font-bold text-white mb-4">QCM Termin√© !</h2>
          <div className="text-6xl font-extrabold text-white mb-6">
            {finalScore.toFixed(0)}%
          </div>
          <p className="text-xl text-white/80 mb-8">
            {score} / {questions.length} bonnes r√©ponses
          </p>
          <div className="flex gap-4 justify-center">
            <button
              onClick={() => {
                setCurrentQuestion(0)
                setAnswers({})
                setScore(0)
                setCompleted(false)
                setShowFeedback(false)
              }}
              className="px-8 py-4 bg-white/20 hover:bg-white/30 text-white rounded-xl font-semibold transition-all"
            >
              Recommencer
            </button>
            <Link
              to="/"
              className="px-8 py-4 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-xl font-semibold hover:shadow-2xl transition-all"
            >
              Retour √† l'accueil
            </Link>
          </div>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="min-h-screen py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <Link to="/" className="inline-flex items-center text-white/80 hover:text-white mb-4">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Retour
          </Link>
          <h1 className="text-4xl font-bold text-white mb-2">ü´Å Asthme</h1>
          <p className="text-white/80">Question {currentQuestion + 1} sur {questions.length}</p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="h-3 bg-white/20 rounded-full overflow-hidden">
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              className="h-full bg-gradient-to-r from-blue-500 to-cyan-500"
            />
          </div>
        </div>

        {/* Question Card */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentQuestion}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 mb-8"
          >
            <div className="flex items-start justify-between mb-6">
              <span className="px-4 py-2 bg-blue-500/20 text-blue-200 rounded-full text-sm font-semibold">
                {question.niveau}
              </span>
              <span className="px-4 py-2 bg-white/20 text-white rounded-full text-sm font-semibold">
                {question.type.toUpperCase()}
              </span>
            </div>

            <h3 className="text-2xl font-bold text-white mb-6">{question.question}</h3>

            {/* Vrai/Faux */}
            {question.type === 'vrai-faux' && (
              <div className="flex gap-4">
                {['Vrai', 'Faux'].map((option) => (
                  <button
                    key={option}
                    onClick={() => handleAnswer(option)}
                    disabled={showFeedback}
                    className={`flex-1 py-4 rounded-xl font-semibold transition-all ${
                      answers[currentQuestion] === option
                        ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white'
                        : 'bg-white/10 text-white hover:bg-white/20'
                    }`}
                  >
                    {option}
                  </button>
                ))}
              </div>
            )}

            {/* QCU */}
            {question.type === 'qcu' && (
              <div className="space-y-3">
                {question.options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleAnswer(index)}
                    disabled={showFeedback}
                    className={`w-full p-4 text-left rounded-xl transition-all ${
                      answers[currentQuestion] === index
                        ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white'
                        : 'bg-white/10 text-white hover:bg-white/20'
                    }`}
                  >
                    {option}
                  </button>
                ))}
              </div>
            )}

            {/* QCM */}
            {question.type === 'qcm' && (
              <div className="space-y-3">
                {question.options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      const current = answers[currentQuestion] || []
                      const updated = current.includes(index)
                        ? current.filter(i => i !== index)
                        : [...current, index]
                      handleAnswer(updated)
                    }}
                    disabled={showFeedback}
                    className={`w-full p-4 text-left rounded-xl transition-all ${
                      (answers[currentQuestion] || []).includes(index)
                        ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white'
                        : 'bg-white/10 text-white hover:bg-white/20'
                    }`}
                  >
                    {option}
                  </button>
                ))}
                <p className="text-white/60 text-sm mt-2">Plusieurs r√©ponses possibles</p>
              </div>
            )}

            {/* Feedback */}
            <AnimatePresence>
              {showFeedback && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-6 p-4 bg-white/20 rounded-xl border border-white/30"
                >
                  <p className="text-white/90">{question.feedback}</p>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </AnimatePresence>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={previousQuestion}
            disabled={currentQuestion === 0}
            className="px-6 py-3 bg-white/10 text-white rounded-xl font-semibold hover:bg-white/20 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Pr√©c√©dent
          </button>
          <button
            onClick={nextQuestion}
            disabled={!showFeedback}
            className="px-6 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-xl font-semibold hover:shadow-2xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {currentQuestion === questions.length - 1 ? 'Terminer' : 'Suivant'}
          </button>
        </div>

        {/* Score */}
        <div className="mt-8 text-center">
          <p className="text-white/60">
            Score actuel : <span className="font-bold text-white">{score} / {currentQuestion + 1}</span>
          </p>
        </div>
      </div>
    </div>
  )
}
